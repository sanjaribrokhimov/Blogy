package utils

import (
	"fmt"
	"net/http"
)

// SendTelegramOTP –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç OTP –∫–æ–¥ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
func SendTelegramOTP(chatID string, otp string) error {
	botToken := "7690904808:AAEyzgbEZ3--sQ1pkJ-bFBpnDSCY2rNq9VY"

	// –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
	notificationURL := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", botToken)
	client := &http.Client{}
	notifReq, err := http.NewRequest("POST", notificationURL, nil)
	if err != nil {
		return fmt.Errorf("error creating notification request: %v", err)
	}

	q := notifReq.URL.Query()
	q.Add("chat_id", chatID)
	q.Add("text", "‚ö†Ô∏è –ù–æ–≤—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
	notifReq.URL.RawQuery = q.Encode()

	_, err = client.Do(notifReq)
	if err != nil {
		return fmt.Errorf("error sending notification: %v", err)
	}

	// –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º –∫–æ–¥
	message := fmt.Sprintf("<b>üîî –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b> <code>%s</code>", otp)
	url := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", botToken)

	// –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç
	client = &http.Client{}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
	req, err := http.NewRequest("POST", url, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	q = req.URL.Query()
	q.Add("chat_id", chatID)
	q.Add("text", message)
	q.Add("parse_mode", "HTML")
	q.Add("disable_notification", "false")
	q.Add("allow_sending_without_reply", "true")
	q.Add("disable_web_page_preview", "true") // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫
	q.Add("protect_content", "false")         // –£–±–∏—Ä–∞–µ–º –∑–∞—â–∏—Ç—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	req.URL.RawQuery = q.Encode()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending telegram message: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("telegram API returned non-200 status code: %d", resp.StatusCode)
	}

	return nil
}

// SendTelegramMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç
func SendTelegramMessage(chatID string, message string) error {
	botToken := "7690904808:AAEyzgbEZ3--sQ1pkJ-bFBpnDSCY2rNq9VY"
	url := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", botToken)

	// –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç
	client := &http.Client{}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
	req, err := http.NewRequest("POST", url, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	q := req.URL.Query()
	q.Add("chat_id", chatID)
	q.Add("text", message)
	req.URL.RawQuery = q.Encode()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending telegram message: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("telegram API returned non-200 status code: %d", resp.StatusCode)
	}

	return nil
}
