import os
import time
from loguru import logger
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from dotenv import load_dotenv
import urllib.parse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add("bot.log", rotation="1 MB", level="INFO", compression="zip")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN', '7690904808:AAEyzgbEZ3--sQ1pkJ-bFBpnDSCY2rNq9VY')

class TelegramBot:
    TEXTS = {
        'ru': {
            'welcome': r"""
üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Bloger Agency!*

üéØ *–ß—Ç–æ —Ç–∞–∫–æ–µ Bloger Agency?*
–≠—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–∞–∫ –±–ª–æ–≥–µ—Ä
‚Ä¢ –ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –∫–æ–º–ø–∞–Ω–∏—é
‚Ä¢ –ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã –∫–∞–∫ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä

‚ú® *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:*
‚Ä¢ –£–¥–æ–±–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –ü—Ä—è–º–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –±–ª–æ–≥–µ—Ä–∞–º–∏ –∏ –±—Ä–µ–Ω–¥–∞–º–∏
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–¥–µ–ª–∫–∏
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ

üí° *–ö–∞–∫ –Ω–∞—á–∞—Ç—å?*
–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üåê –û—Ç–∫—Ä—ã—Ç—å app' –Ω–∏–∂–µ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –º–∏—Ä –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!

üöÄ –ù–∞–π–¥–∏—Ç–µ –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è.
            """,
            'subscription': r"""
‚ùóÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bloger Agency !*

ü§ñ –ù–∞—à –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –∑–∞–∫–∞–∑—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –†–∞–∑–º–µ—â–∞—Ç—å —Å–≤–æ–∏ —É—Å–ª—É–≥–∏
‚Ä¢ –°–≤—è–∑—ã–≤–∞—Ç—å—Å—è —Å —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –ë—ã—Ç—å –≤ –∫—É—Ä—Å–µ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π

üì¢ *–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:*
[@blogerAgency](https://t.me/blogerAgensy)

‚úÖ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.
            """,
            'help': r"""
üîç *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:*
‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üåê –û—Ç–∫—Ä—ã—Ç—å app' –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã' –¥–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏

üì± *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—à–∏—Ö —É—Å–ª—É–≥
‚Ä¢ –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
            """,
            'contacts': r"""
üìû *–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:*
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +998 97 708 78 67
‚Ä¢ Instagram: [bloger.agency](https://www.instagram.com/bloger.agency/)
‚Ä¢ –°–∞–π—Ç: [bloger.agency](https://bloger.agency)

üë®‚Äçüíª Developer: [@sanjar_3210](https://t.me/sanjar_3210)
            """,
            'choose_language': "üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Iltimos, tilni tanlang:",
            'language_changed': "‚úÖ –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π",
            'not_subscribed': "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.",
            'subscription_verified': "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
            'subscription_failed': "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        },
        'uz': {
            'welcome': r"""
üëã *Bloger Agency ilovasiga xush kelibsiz!*

üéØ *Bloger Agency nima?*
Bu yerda siz:
‚Ä¢ Bloger sifatida e'lon joylashtirishingiz
‚Ä¢ O'z kompaniyangizni taqdim etishingiz
‚Ä¢ Frilanser sifatida buyurtmalar topishingiz
mumkin

‚ú® *Bizning ilovamizning afzalliklari:*
‚Ä¢ Takliflar va buyurtmalarni qulay qidirish
‚Ä¢ Blogerlar va brendlar o'rtasida to'g'ridan-to'g'ri aloqa
‚Ä¢ Xavfsiz bitimlar
‚Ä¢ Dolzarb takliflar bazasi
‚Ä¢ Professional hamjamiyat

üí° *Qanday boshlash kerak?*
'üåê Ilovani ochish' tugmasini bosing va o'zingiz uchun yangi imkoniyatlar yarating!

üöÄ Aynan rivojlanishingiz uchun foydali bo'lgan narsalarni toping.
            """,
            'subscription': r"""
‚ùóÔ∏è *Bloger.Agency-ga xush kelibsiz!*

ü§ñ Bizning bot sizga yordam beradi:
‚Ä¢ Buyurtmalar va takliflarni topish
‚Ä¢ O'z xizmatlaringizni joylashtirish
‚Ä¢ Reklama beruvchilar bilan bog'lanish
‚Ä¢ Yangi imkoniyatlardan xabardor bo'lish

üì¢ *Ilovadan foydalanish va dolzarb yangiliklarni olish uchun kanalimizga obuna bo'ling:*
[@blogerAgency](https://t.me/blogerAgensy)

‚úÖ Obuna bo'lgandan so'ng ilovaga kirish uchun /start tugmasini bosing.
            """,
            'help': r"""
üîç *Botdan qanday foydalanish:*
‚Ä¢ /start - botni ishga tushirish
‚Ä¢ Ilovaga kirish uchun 'üåê Ilovani ochish' tugmasini bosing
‚Ä¢ Biz bilan bog'lanish uchun 'üìû Kontaktlar' tugmasini bosing

üì± *Imkoniyatlar:*
‚Ä¢ Xizmatlarimizni ko'rish
‚Ä¢ Menejer bilan bog'lanish
‚Ä¢ Veb-ilovaga kirish
            """,
            'contacts': r"""
üìû *Bizning kontaktlar:*
‚Ä¢ Telefon: +998 97 708 78 67
‚Ä¢ Instagram: [bloger.agency](https://www.instagram.com/bloger.agency/)
‚Ä¢ Sayt: [bloger.agency](https://bloger.agency)

üíª Developer: [@sanjar_3210](https://t.me/sanjar_3210)
            """,
            'choose_language': "üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Iltimos, tilni tanlang:",
            'language_changed': "‚úÖ Til muvaffaqiyatli o'zbekchaga o'zgartirildi",
            'not_subscribed': "Bot funksiyalaridan foydalanish uchun kanalimizga obuna bo'lishingiz kerak.",
            'subscription_verified': "‚úÖ Obuna tasdiqlandi! Endi botning barcha funksiyalari sizga dostup.",
            'subscription_failed': "‚ùå Obuna topilmadi. Iltimos, kanalga obuna bo'ling va qaytadan urinib ko'ring."
        }
    }

    def __init__(self):
        self.bot = telebot.TeleBot(TOKEN)
        self.channel_id = "@blogerAgensy"
        self.user_languages = {}
        self.setup_handlers()
        
    def create_language_keyboard(self):
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = [
            KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π"),
            KeyboardButton("üá∫üáø O'zbekcha")
        ]
        keyboard.add(*buttons)
        return keyboard

    def create_main_keyboard(self, lang='ru', chat_id=None):
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        
        try:
            if chat_id:
                user = self.bot.get_chat(chat_id)
                logger.info(f"Got user data from Telegram: username={user.username}, first_name={user.first_name}, id={user.id}")
                
                # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                contact_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
                contact_keyboard.add(KeyboardButton(
                    text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" if lang == 'ru' else "üì± Telefon raqamini yuborish",
                    request_contact=True
                ))
                
                self.bot.send_message(
                    chat_id=chat_id,
                    text="–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞" if lang == 'ru' else 
                         "Davom etish uchun telefon raqamingizni ulashing",
                    reply_markup=contact_keyboard
                )
                
                # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤ handle_contact
                return None
                
            else:
                logger.warning("No chat_id provided")
                
        except Exception as e:
            logger.error(f"Error requesting contact: {e}", exc_info=True)
            
        return keyboard

    def handle_language_selection(self, message):
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
            if message.text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π":
                lang = 'ru'
                response_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"
            elif message.text == "üá∫üáø O'zbekcha":
                lang = 'uz'
                response_text = "Davom etish uchun telefon raqamingizni ulashing"
            else:
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
            self.user_languages[message.from_user.id] = lang
            logger.info(f"User {message.from_user.id} selected language: {lang}")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞
            contact_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            contact_keyboard.add(KeyboardButton(
                text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" if lang == 'ru' else "üì± Telefon raqamini yuborish",
                request_contact=True
            ))

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            self.bot.send_message(
                chat_id=message.chat.id,
                text=response_text,
                reply_markup=contact_keyboard
            )

        except Exception as e:
            logger.error(f"Error in handle_language_selection: {e}", exc_info=True)

    def handle_contact(self, message):
        try:
            if message.contact is not None:
                user = self.bot.get_chat(message.chat.id)
                phone = message.contact.phone_number
                logger.info(f"Received contact: {phone} from user {user.username}")
                
                # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                lang = self.user_languages.get(message.from_user.id, 'ru')
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è URL
                init_data = {
                    'tg_chat_id': str(user.id),
                    'tg_username': str(user.username) if user.username else '',
                    'tg_user_id': str(user.id),
                    'tg_first_name': str(user.first_name) if user.first_name else '',
                    'tg_phone': str(phone),
                    'tg_auth_date': str(int(time.time()))
                }
                
                # –°–æ–∑–¥–∞–µ–º URL —Å –¥–∞–Ω–Ω—ã–º–∏
                param_string = '&'.join([f"{k}={v}" for k, v in init_data.items() if v])
                encoded_data = urllib.parse.quote(param_string)
                web_app_url = f"https://8962-84-54-90-182.ngrok-free.app/login.php?tgdata={encoded_data}"
                web_app = WebAppInfo(url=web_app_url)
                
                # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
                buttons_text = {
                    'ru': [
                        (KeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å app", web_app=web_app)),
                        "üë• –ù–∞—à–∞ –≥—Ä—É–ø–ø–∞", "üì¢ –ù–∞—à –∫–∞–Ω–∞–ª",
                        "‚ùì –ü–æ–º–æ—â—å", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
                        "üîÑ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"
                    ],
                    'uz': [
                        (KeyboardButton(text="üåê Ilovani ochish", web_app=web_app)),
                        "üë• Bizning guruh", "üì¢ Bizning kanal",
                        "‚ùì Yordam", "üìû Kontaktlar",
                        "üîÑ Tilni o'zgartirish"
                    ]
                }

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
                buttons = []
                for text in buttons_text[lang]:
                    if isinstance(text, KeyboardButton):
                        buttons.append(text)
                    else:
                        buttons.append(KeyboardButton(text=text))

                # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏
                keyboard.row(buttons[0])
                keyboard.row(buttons[1], buttons[2])
                keyboard.row(buttons[3], buttons[4])
                keyboard.row(buttons[5])

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                welcome_text = {
                    'ru': self.TEXTS[lang]['welcome'],
                    'uz': self.TEXTS[lang]['welcome']
                }
                
                self.bot.send_message(
                    chat_id=message.chat.id,
                    text=welcome_text[lang],
                    reply_markup=keyboard
                )
                
        except Exception as e:
            logger.error(f"Error handling contact: {e}", exc_info=True)

    def create_subscription_keyboard(self, lang='ru'):
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        buttons_text = {
            'ru': [
                "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                "‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
            ],
            'uz': [
                "üì¢ Kanalga obuna bo'lish",
                "‚úÖ Men obuna bo'ldim"
            ]
        }
        
        for text in buttons_text[lang]:
            keyboard.add(KeyboardButton(text=text))
        return keyboard

    def check_subscription(self, message):
        try:
            member = self.bot.get_chat_member(chat_id=self.channel_id, user_id=message.from_user.id)
            is_subscribed = member.status in ['member', 'administrator', 'creator']
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
            logger.info(f"Subscription check for user {message.from_user.id}: {is_subscribed}")
            
            return is_subscribed
        except telebot.apihelper.ApiException as e:
            logger.error(f"API Error in check_subscription: {e}")
            return False
        except Exception as e:
            logger.error(f"Unexpected error in check_subscription: {e}")
            return False

    def send_subscription_message(self, message):
        try:
            lang = self.user_languages.get(message.from_user.id, 'ru')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ create_subscription_keyboard
            keyboard = self.create_subscription_keyboard(lang)
            
            self.bot.send_message(
                message.chat.id,
                self.TEXTS[lang]['subscription'],
                parse_mode='MarkdownV2',
                disable_web_page_preview=True,
                reply_markup=keyboard
            )
            
            logger.info(f"Subscription message sent to user {message.from_user.id}")
        except Exception as e:
            logger.error(f"Error in send_subscription_message: {e}")
            self.send_error_message(message)

    def subscription_required(self, handler):
        def wrapper(message):
            if self.check_subscription(message):
                return handler(message)
            else:
                self.send_subscription_message(message)
        return wrapper

    def send_welcome(self, message):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            if not self.check_subscription(message):
                self.send_subscription_message(message)
                return

            lang = self.user_languages.get(message.from_user.id, 'ru')
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ TEXTS
            self.bot.send_message(
                message.chat.id,
                self.TEXTS[lang]['welcome'],
                parse_mode='MarkdownV2',
                reply_markup=self.create_language_keyboard()  # –ù–∞—á–∏–Ω–∞–µ–º —Å –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
            )
            logger.info(f"Welcome message sent to user {message.from_user.id}")
        except Exception as e:
            logger.error(f"Error in send_welcome: {e}")
            self.send_error_message(message)

    def send_help(self, message):
        try:
            lang = self.user_languages.get(message.from_user.id, 'ru')
            self.bot.send_message(
                message.chat.id,
                self.TEXTS[lang]['help'],
                parse_mode='MarkdownV2'
            )
        except Exception as e:
            logger.error(f"Error in send_help: {e}")
            self.send_error_message(message)

    def send_contacts(self, message):
        try:
            lang = self.user_languages.get(message.from_user.id, 'ru')
            self.bot.send_message(
                message.chat.id,
                self.TEXTS[lang]['contacts'],
                parse_mode='MarkdownV2',
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"Error in send_contacts: {e}")
            self.send_error_message(message)

    def send_error_message(self, message):
        try:
            lang = self.user_languages.get(message.from_user.id, 'ru')
            error_text = {
                'ru': "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                'uz': "Kechirasiz, xatolik yuz berdi. Keyinroq urinib ko'ring yoki yordam xizmatiga murojaat qiling."
            }
            self.bot.send_message(message.chat.id, error_text[lang])
        except Exception as e:
            logger.error(f"Error in send_error_message: {e}")

    def setup_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def start_handler(message):
            try:
                if not self.check_subscription(message):
                    self.send_subscription_message(message)
                    return
                    
                # –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
                keyboard = self.create_language_keyboard()
                self.bot.send_message(
                    message.chat.id,
                    self.TEXTS['ru']['choose_language'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ TEXTS
                    reply_markup=keyboard
                )
            except Exception as e:
                logger.error(f"Error in start handler: {e}")
                self.send_error_message(message)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        @self.bot.message_handler(func=lambda message: message.text in ["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∫üáø O'zbekcha"])
        def language_handler(message):
            self.handle_language_selection(message)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        @self.bot.message_handler(content_types=['contact'])
        def contact_handler(message):
            self.handle_contact(message)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"
        @self.bot.message_handler(func=lambda message: message.text in ["üîÑ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "üîÑ Tilni o'zgartirish"])
        def change_language(message):
            keyboard = self.create_language_keyboard()
            self.bot.send_message(
                message.chat.id,
                "üá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫nüá∫üáø Tilni tanlang",
                reply_markup=keyboard
            )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—à–∞ –≥—Ä—É–ø–ø–∞"
        @self.bot.message_handler(func=lambda message: message.text in ["üë• –ù–∞—à–∞ –≥—Ä—É–ø–ø–∞", "üë• Bizning guruh"])
        def send_group(message):
            lang = self.user_languages.get(message.from_user.id, 'ru')
            text = "–ù–∞—à–∞ –≥—Ä—É–ø–ø–∞: https://t.me/blogerAgencyGroup" if lang == 'ru' else "Bizning guruh: https://t.me/bloger_agency_group"
            self.bot.send_message(message.chat.id, text)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—à –∫–∞–Ω–∞–ª"
        @self.bot.message_handler(func=lambda message: message.text in ["üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", "üì¢ Bizning kanal"])
        def send_channel(message):
            lang = self.user_languages.get(message.from_user.id, 'ru')
            text = "–ù–∞—à –∫–∞–Ω–∞–ª: https://t.me/bloger_agency" if lang == 'ru' else "Bizning kanal: https://t.me/bloger_agency"
            self.bot.send_message(message.chat.id, text)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
        @self.bot.message_handler(func=lambda message: message.text in ["‚ùì –ü–æ–º–æ—â—å", "‚ùì Yordam"])
        def help_handler(message):
            lang = self.user_languages.get(message.from_user.id, 'ru')
            help_text = {
                'ru': self.TEXTS[lang]['help'],
                'uz': self.TEXTS[lang]['help']
            }
            self.bot.send_message(message.chat.id, help_text[lang])

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
        @self.bot.message_handler(func=lambda message: message.text in ["üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "üìû Kontaktlar"])
        def contacts_handler(message):
            lang = self.user_languages.get(message.from_user.id, 'ru')
            contacts_text = {
                'ru': self.TEXTS[lang]['contacts'],
                'uz': self.TEXTS[lang]['contacts']
            }
            self.bot.send_message(message.chat.id, contacts_text[lang])

    def run(self):
        try:
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            self.bot.infinity_polling(timeout=10, long_polling_timeout=5)
        except KeyboardInterrupt:
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.bot.stop_polling()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
            time.sleep(5)

if __name__ == "__main__":
    bot = TelegramBot()
    bot.run() 